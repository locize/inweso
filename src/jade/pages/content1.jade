- var path = '../'
- var title = 'cqrs - domain'
!!! 5
html(lang="en")
  head
    include ../includes/layout/head

  body
    include ../includes/layout/header
          
    include ../includes/layout/content
      .documentation
        .row-fluid
          .span8
            .hero-unit
              h2 
                | cqrs-domain
                //- small  - translation made easy
              p cqrs-domain is a node.js module based on nodeEventStore. It can be very useful as domain component if you work with (d)ddd, cqrs, eventdenormalizer, host, etc.

          .span4.downloads
            p node.js:
            pre
              code
                | npm install cqrs-domain

            p
              | Build status: 
              a(href='http://travis-ci.org/adrai/node-cqrs-domain')
                img(src='https://secure.travis-ci.org/adrai/node-cqrs-domain.png')

            .alert.alert-info.feature-description(style='margin-top: 25px;')
                a(href='https://github.com/adrai/node-cqrs-domain')
                  i.icon-github
                  |  fork me on github
                br
                a(href='https://github.com/adrai/node-cqrs-domain/issues')
                  i.icon-github
                  |  issues

        .row-fluid
          .span12
            h2 Initialization

            .row-fluid
              .span4
                h4.feature-title Require

              .span8
                .feature
                  pre
                    code
                      | var domain = require('cqrs-domain').domain;

            .row-fluid
              .span4
                h4.feature-title Register for events

              .span8
                .feature
                  pre
                    code
                      | domain.on('event', function(evt) {
                      |     // send to bus
                      | });

                  .alert.alert-info.feature-description
                    h6 Important hint:
                    p The event has these properties: id, event, payload and head(with actual aggregate revision).

            .row-fluid
              .span4
                h4.feature-title Configure and initialize

              .span8
                .feature
                  pre
                    code
                      | domain.initialize({
                      |     commandHandlersPath: __dirname + '/commandHandlers',
                      |     aggregatesPath: __dirname + '/aggregates',
                      |     sagaHandlersPath: __dirname + '/sagaHandlers',  // optional, only if using sagas
                      |     sagasPath: __dirname + '/sagas',                // optional, only if using sagas
                      |     publishingInterval: 20,                         // optional
                      |     snapshotThreshold: 10,                          // optional
                      |     commandQueue: {                                 // optional
                      |         type: 'mongoDb',                            // example with mongoDb
                      |         dbName: 'domain',
                      |         collectionName: 'commands',                 // optional
                      |         host: 'localhost',                          // optional
                      |         port: 27017,                                // optional
                      |         username: 'user',                           // optional
                      |         password: 'pwd'                             // optional
                      |     },
                      |     repository: {                                   // optional
                      |         type: 'mongoDb',                            // example with mongoDb
                      |         dbName: 'domain',
                      |         collectionName: 'sagas',                    // optional
                      |         host: 'localhost',                          // optional
                      |         port: 27017,                                // optional
                      |         username: 'user',                           // optional
                      |         password: 'pwd'                             // optional
                      |     },
                      |     eventStore: {                                   // optional
                      |         type: 'mongoDb',                            // example with mongoDb
                      |         dbName: 'domain',
                      |         eventsCollectionName: 'events',             // optional
                      |         snapshotsCollectionName: 'snapshots',       // optional
                      |         host: 'localhost',                          // optional
                      |         port: 27017,                                // optional
                      |         username: 'user',                           // optional
                      |         password: 'pwd'                             // optional
                      |     }
                      | }, function(err) {
                      |     // ready...
                      | });

                  .alert.alert-info.feature-description
                    h6 Important hint:
                    p The validation rules and business rules should be placed parallel to the aggregates folder.
                    p In this example "__dirname + '/validationRules'" and "__dirname + '/businessRules'"
                    p The validation rules documentation can be found 
                      a(href='https://github.com/adrai/rule-validator') here
                      .

            .row-fluid
              .span4
                h4.feature-title Handle commands

              .span8
                .feature
                  pre
                    code
                      | domain.handle({ id: 'msgId', command: 'createDummy', payload: { id: '23445' } }, function(err) {
                      |     // saved in command queue...
                      | });

                  .alert.alert-info.feature-description
                    h6 Important hint:
                    p The command must have the properties: id, command and payload.
                    p If you want to check the aggregate revision, the command object needs to have the head property: head: { revision: 1234 }

        .row-fluid
          .span12
            h2 Components

            .row-fluid
              .span4
                h4.feature-title Aggregate

              .span8
                .feature
                  pre
                    code
                      | var base = require('cqrs-domain').aggregateBase;
                      | 
                      | module.exports = base.extend({
                      |   
                      |     // Commands
                      |   
                      |     createDummy: function(data, callback) {
                      |         this.apply(this.toEvent('dummyCreated', data));
                      | 
                      |         this.checkBusinessRules(callback);
                      |     },
                      | 
                      |     destroyDummy: function(data, callback) {
                      |         this.apply(this.toEvent('dummyDestroyed', data));
                      | 
                      |         this.checkBusinessRules(callback);
                      |     },
                      | 
                      | 
                      |     // Events
                      |   
                      |     dummyCreated: function(data) {
                      |         this.set(data);
                      |     },
                      | 
                      |     dummyDestroyed: function(data) {
                      |         this.set('destroyed', true);
                      |     },
                      | 
                      | });

                  .alert.alert-info.feature-description
                    h6 Important hint:
                    p Save the aggregate in the aggregates folder and name it well. In this example dummyAggregate.js
                    p In a command function create an event and apply it, when applied optionally you can check the business rules.
                    p In an event function simply save the event data as you like.


            .row-fluid
              .span4
                h4.feature-title Business rules

              .span8
                .feature
                  pre
                    code
                      | module.exports = {
                      |     dummyAggregate: [
                      | 
                      |         function myRule1(changed, previous, events, callback) {
                      |             if (changed.a < previous.a) {
                      |                 callback('a must be bigger than a before!');
                      |             } else {
                      |                 callback(null);
                      |             }
                      |         }
                      | 
                      |     ]
                      | };

                  .alert.alert-info.feature-description
                    h6 Important hint:
                    p Save the business rules in the business rules folder.


            .row-fluid
              .span4
                h4.feature-title Command handler

              .span8
                .feature
                  pre
                    code
                      | var commandHandlerBase = require('cqrs-domain').commandHandlerBase;
                      | 
                      | module.exports = commandHandlerBase.extend({
                      | 
                      |     aggregate: 'dummyAggregate',
                      | 
                      |     commands: ['createDummy', 'destroyDummy', 'fooIt' ],
                      | 
                      |     fooIt: function(id, cmd) {
                      |         var self = this;
                      |         (new this.Command({
                      |             command: 'createFoo',
                      |             payload: {
                      |                 name: 'bla'
                      |             }
                      |         })).emit(function(evt) {
                      |             cmd.payload.fooId = evt.payload.id;
                      |             self.defaultHandle(id, cmd);
                      |         });
                      |     }
                      | 
                      | });

                  .alert.alert-info.feature-description
                    h6 Important hint:
                    p Save the command handler in the command handlers folder and name it well. In this example dummyCommandHandler.js
                    p If you define own handler functions you can do special things like emitting an other command.
    
    include ../includes/layout/endscripts